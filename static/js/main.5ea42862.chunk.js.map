{"version":3,"sources":["results.js","weather.js","App.js","reportWebVitals.js","index.js"],"names":["Results","temp","humidity","pressure","weathermood","name","speed","country","sunset","React","useState","weatherState","setWeatheState","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleDateString","Weather","searchValue","setSearchValue","tempInfo","setTempInfo","fetchInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ea42862.chunk.js","sourcesContent":["import React ,{ useEffect} from 'react';\r\n\r\n\r\nconst Results = ({\r\n    temp,\r\n    humidity,\r\n    pressure,\r\n    weathermood,\r\n    name,\r\n    speed,\r\n    country,\r\n    sunset,\r\n  }) => {\r\n    const [weatherState, setWeatheState] = React.useState(\"\");\r\n\r\n    useEffect(() => {\r\n      if (weathermood) {\r\n        switch (weathermood) {\r\n          case \"Clouds\":\r\n            setWeatheState(\"wi-cloudy\");\r\n            break;\r\n          case \"Fog\":\r\n            setWeatheState(\"wi-fog\");\r\n            break;\r\n          case \"Clear\":\r\n            setWeatheState(\"wi-day-sunny\");\r\n            break;\r\n          case \"Windy\":\r\n            setWeatheState(\"wi-dust\");\r\n            break;\r\n\r\n            case \"Mist\":\r\n            setWeatheState(\"wi-sleet\");\r\n            break;\r\n\r\n\r\n          case \"Rain\":\r\n              setWeatheState(\"wi-rain\");\r\n              break;\r\n\r\n          case \"Dust\":\r\n            setWeatheState(\"wi-dust\");\r\n            break;\r\n\r\n            case \"Haze\":\r\n              setWeatheState(\"wi-day-haze\");\r\n              break;\r\n          case \"Storm\":\r\n              setWeatheState(\"wi-sandstorm\");\r\n              break;\r\n\r\n          default:\r\n            setWeatheState(\"wi-day-sunny\");\r\n            break;\r\n        }\r\n      }\r\n    }, [weathermood]);\r\n/*\r\n    let seconds = sunset; */\r\n    let date = new Date();\r\n    let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n\r\n    return (\r\n        <>\r\n                      <article className=\"box\">\r\n                    <div className=\"icon\">\r\n                    {<i className={`wi ${weatherState}`}></i>}\r\n                    </div>\r\n\r\n            <div className=\"weather_info\">\r\n                    <div className=\"temperature\">\r\n                    <span>{temp}&deg;</span>\r\n            </div>\r\n\r\n            <div className=\"discription\">\r\n                    <div className=\"weather_condition\">{weathermood}</div>\r\n                    <div className=\"place\">{name},{country}</div>\r\n            </div>\r\n            </div>\r\n\r\n            <div className=\"date\">\r\n            {new Date().toLocaleDateString()}\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"colum\">\r\n                <div className=\"temp_info\">\r\n                <div className=\"two_fold\">\r\n                <p><i className=\"wi wi-sunset\"></i></p>\r\n                <p className=\"left_side\">{timeStr}<br/>Sunset</p>\r\n                </div>\r\n\r\n                <div className=\"two_fold\">\r\n                <p><i className=\"wi wi-humidity\"></i></p>\r\n                <p className=\"left_side\">{humidity} <br/>Humidity</p>\r\n                </div>\r\n                </div>\r\n\r\n                <div className=\"weather_extra\">\r\n                <div className=\"two_fold\">\r\n                <p><i className={\"wi wi-barometer\"}></i></p>\r\n                <p className=\"left_side\">{pressure} <br/>Pressure</p>\r\n                </div>\r\n\r\n                <div className=\"two_fold\">\r\n                <p><i className=\"wi wi-strong-wind\"></i></p>\r\n                <p className=\"left_side\">{speed} <br/>Speed</p>\r\n                </div>\r\n\r\n                </div>\r\n\r\n                </div>\r\n\r\n\r\n        </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Results;\r\n","import React,{useState,useEffect} from 'react';\r\nimport './weather.css';\r\nimport Results from './results.js';\r\n\r\n\r\nconst Weather = () => {\r\n\r\n    const [searchValue,setSearchValue]=useState(\"Delhi\");\r\n    const[tempInfo,setTempInfo]=useState({});\r\n\r\n    const fetchInfo= async () =>{\r\n    try {\r\n        let url =\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=217626d5b55dbfba9b917830137178b7`;\r\n\r\n        const res = await fetch(url);\r\n        const data = await res.json();\r\n\r\n        const {temp,humidity,pressure} = data.main;\r\n        const{main : weathermood } = data.weather[0];\r\n        const{name} = data;\r\n        const{speed} = data.wind;\r\n        const{country,sunset} = data.sys;\r\n\r\n        const tempResult={\r\n            temp,humidity,pressure,weathermood,name,speed,country,sunset,\r\n        };\r\n        setTempInfo(tempResult);\r\n        } catch (error) {\r\n        console.log(error)\r\n        }\r\n        };\r\n\r\n    useEffect(() => { fetchInfo();});\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className=\"wrap\">\r\n            <div className=\"search\">\r\n                <input type=\"search\" className=\"searchloc\" placeholder=\"Enter location\" autoFocus id=\"search\" value={searchValue} onChange={(e) => setSearchValue(e.target.value)}/>\r\n                <button className=\"btn\" onClick={fetchInfo}>Search</button>\r\n            </div>\r\n\r\n            <Results {...tempInfo}/>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Weather;\r\n","import Weather from \"./weather.js\";\nimport './App.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h2>TEMPERATURE</h2>\n    <Weather/>\n\n    </div>\n  );\n}\n\nexport default App;\n//api.openweathermap.org/data/2.5/weather?q=pune&appid=65c33c67af2692b01c733d9b2aec0eda","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}